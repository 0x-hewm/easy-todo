name: CI/CD
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Validate build output
        run: |
          test -f dist/manifest.json || exit 1
          test -f dist/popup.html || exit 1
          test -f dist/popup.js || exit 1
          test -f dist/background.js || exit 1
          test -f dist/styles.css || exit 1
          echo "All required files exist"

      - name: Check manifest validity
        run: |
          node -e "
            const manifest = require('./dist/manifest.json');
            if (!manifest.name || !manifest.version) {
              console.error('Invalid manifest.json');
              process.exit(1);
            }
            console.log('Manifest is valid');
          "

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=$((5 * 1024 * 1024))  # 5MB
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "Bundle size ($BUNDLE_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
            exit 1
          fi
          echo "Bundle size: $BUNDLE_SIZE bytes (OK)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '18.x'
        with:
          name: build-artifacts
          path: |
            dist/
            *.zip
            build-report.json
          retention-days: 7

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules; then
            echo "Found TODO/FIXME comments. Please resolve them before merging."
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for sensitive data
        run: |
          if grep -r "password\|secret\|token\|api_key" src/ --exclude-dir=node_modules | grep -v ".d.ts"; then
            echo "Potential sensitive data found in source code"
            exit 1
          fi

  release:
    needs: [build, lint, test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for release
        run: npm run build

      - name: Create release
        uses: softprops/action-gh-release@v1
        if: contains(github.event.head_commit.message, 'release:')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            Automated release from main branch

            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
          files: |
            easy-todo-v*.zip
            dist/**/*

name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Validate build output
        run: |
          test -f dist/manifest.json || exit 1
          test -f dist/popup.html || exit 1
          test -f dist/popup.js || exit 1
          test -f dist/background.js || exit 1
          test -f dist/styles.css || exit 1
          echo "All required files exist"

      - name: Check manifest validity
        run: |
          node -e "
            const manifest = require('./dist/manifest.json');
            if (!manifest.name || !manifest.version) {
              console.error('Invalid manifest.json');
              process.exit(1);
            }
            console.log('Manifest is valid');
          "

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=$((5 * 1024 * 1024))  # 5MB
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "Bundle size ($BUNDLE_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
            exit 1
          fi
          echo "Bundle size: $BUNDLE_SIZE bytes (OK)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.zip
            build-report.json
          retention-days: 7

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules; then
            echo "Found TODO/FIXME comments. Please resolve them before merging."
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for sensitive data
        run: |
          if grep -r "password\|secret\|token\|api_key" src/ --exclude-dir=node_modules | grep -v ".d.ts"; then
            echo "Potential sensitive data found in source code"
            exit 1
          fi

  release:
    needs: [build, lint, test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for release
        run: npm run build

      - name: Debug token permissions
        run: |
          echo "Checking GitHub token permissions..."
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check-release
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.package-version.outputs.version }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.package-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.package-version.outputs.version }} does not exist"
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: contains(github.event.head_commit.message, 'release:') && steps.check-release.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: |
            🚀 **Easy Todo Chrome Extension v${{ steps.package-version.outputs.version }}**

            **Release Notes:**
            ${{ github.event.head_commit.message }}

            **Download:**
            - `easy-todo-v${{ steps.package-version.outputs.version }}.zip` - Chrome Web Store 发布包
            - `easy-todo.zip` - 通用发布包

            **Installation:**
            1. 下载 ZIP 文件
            2. 解压到本地目录
            3. 在 Chrome 中打开 `chrome://extensions/`
            4. 启用"开发者模式"
            5. 点击"加载已解压的扩展程序"
            6. 选择解压后的目录

            ---
            *自动发布于: ${{ github.run_id }}*
          draft: false
          prerelease: false
          files: |
            easy-todo-v*.zip
            easy-todo.zip
          generate_release_notes: true
          make_latest: true
